#  ____       _                 _                   
# / ___|  ___| |__   ___   ___ | | ___   __ _ _   _ 
# \___ \ / __| '_ \ / _ \ / _ \| |/ _ \ / _` | | | |
#  ___) | (__| | | | (_) | (_) | | (_) | (_| | |_| |
# |____/ \___|_| |_|\___/ \___/|_|\___/ \__, |\__, |
#   ____            _    _              |___/ |___/ 
#  / ___|___   ___ | | _(_) ___                     
# | |   / _ \ / _ \| |/ / |/ _ \                    
# | |__| (_) | (_) |   <| |  __/                    
#  \____\___/ \___/|_|\_\_|\___|                    
#  _____            _       _ _                     
# | ____|_  ___ __ | | ___ (_) |_                   
# |  _| \ \/ / '_ \| |/ _ \| | __|                  
# | |___ >  <| |_) | | (_) | | |_                   
# |_____/_/\_\ .__/|_|\___/|_|\__|                  
#            |_|                         
#
#
# Copyright © 2023 Abdul Zia
# 
# Permission is hereby granted, free of charge, to
# any person obtaining a copy of this software and
# associated documentation files (the “Software”),
# to deal in the Software without restriction,
# including without limitation the rights to use,
# copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is
# furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission
# notice shall be included in all copies or
# substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY
# OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
# LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
# OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# This script will scrape an entire schoology web page given a session cookie, found within a user's web browser.
# This script will bypasss the login of schoology, allowing you to write scripts for whatever purpose you may need (hopefully not nefarious...).
# This script is not super useful by itself, and is not intended to be. This is really only a proof-of-concept.


import requests

url = input('Schoology page link: ')

# Create a session object
s = requests.Session()

# Set the session cookie with httponly and secure flags
cookie_name = input('Session cookie name: ')
cookie_value = input('Session cookie value: ')
cookies = {cookie_name: cookie_value}

# Set custom headers to emulate a real browser (Taken from chrome)
headers = {
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'accept-encoding': 'gzip, deflate, br',
    'accept-language': 'en-US,en;q=0.9',
    'cache-control': 'max-age=0',
    'sec-fetch-dest': 'document',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-site': 'none',
    'sec-fetch-user': '?1',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (iPad; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1'
}

# Send GET request with headers and cookies to retrieve the webpage
try:
    r = s.get(url, headers=headers, cookies=cookies)
    r.raise_for_status()  # Raise an exception if request fails
    # Print the content of the webpage
    print(r.text)
except requests.exceptions.HTTPError as err:
    print(f'Failed to retrieve webpage. Status code: {err.response.status_code}')
except requests.exceptions.RequestException as err:
    print(f'Failed to retrieve webpage. Error: {err}')
